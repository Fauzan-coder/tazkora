// File: prisma/schema.prisma
// This defines our database schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          Role      @default(EMPLOYEE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  createdTeams     Team[]    @relation("TeamCreator")
  leadsTeams       Team[]    @relation("TeamLead")
  teamMemberships  TeamMember[]
  notifications    Notification[]
  managerRights    ManagerRight?
  
  // Relations
  createdTasks  Task[]    @relation("TaskCreator")
  assignedTasks Task[]    @relation("TaskAssignee")
  createdIssues Issue[]   @relation("IssueCreator")
  managedBy     User?     @relation("ManagesToEmployees", fields: [managerId], references: [id])
  managerId     String?
  manages       User[]    @relation("ManagesToEmployees")
}

enum Role {
  HEAD
  MANAGER
  EMPLOYEE
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      TaskStatus  @default(ONGOING)
  priority    Priority    @default(MEDIUM)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  dueDate     DateTime?
  
  // Relations
  creator     User        @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId   String
  assignee    User?       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  issues      Issue[]

  team        Team?     @relation(fields: [teamId], references: [id])
  teamId      String?
  project     Project?  @relation(fields: [projectId], references: [id])
  projectId   String?
}

enum TaskStatus {
  ONGOING
  FINISHED
  BACKLOG
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Issue {
  id          String      @id @default(cuid())
  title       String
  description String
  status      IssueStatus @default(OPEN)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  creator     User        @relation("IssueCreator", fields: [creatorId], references: [id])
  creatorId   String
  task        Task?       @relation(fields: [taskId], references: [id])
  taskId      String?
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Team {
  id            String    @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  creator       User      @relation("TeamCreator", fields: [creatorId], references: [id])
  creatorId     String
  teamLead      User      @relation("TeamLead", fields: [teamLeadId], references: [id])
  teamLeadId    String
  members       TeamMember[]
  projects      Project[]
  tasks         Task[]
}

model TeamMember {
  id            String    @id @default(cuid())
  joinedAt      DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  team          Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId        String

  @@unique([userId, teamId]) // Ensure a user can only be added once to a team
}

model Project {
  id            String    @id @default(cuid())
  name          String
  description   String?
  status        ProjectStatus @default(ONGOING)
  startDate     DateTime  @default(now())
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  team          Team      @relation(fields: [teamId], references: [id])
  teamId        String
  tasks         Task[]
}

enum ProjectStatus {
  PLANNING
  ONGOING
  COMPLETED
  ON_HOLD
}

model ManagerRight {
  id            String    @id @default(cuid())
  canCreateTeam Boolean   @default(false)
  
  // Relations
  manager       User      @relation(fields: [managerId], references: [id], onDelete: Cascade)
  managerId     String    @unique // One-to-one relation with User
}

model Notification {
  id          String    @id @default(cuid())
  message     String
  type        NotificationType
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

enum NotificationType {
  TEAM_ADDED
  TASK_ASSIGNED
  ISSUE_CREATED
  TASK_UPDATE_REQUESTED
  GENERAL
}